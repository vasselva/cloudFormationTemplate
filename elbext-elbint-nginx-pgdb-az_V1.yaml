AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for External ELB -> Internal ELB -> private subnet -> DB: Create a External and Internal
  balanced nginx web server with ELB stickiness enabled. It creates Postgress DB
  as Master in AZ and replica in other AZ. creates 2 EC2 instances behind
  a load balancer with a simple health check on private subnet with nat gateway attached. 
  Creates two public subnet with InternetGateway attached for external loadbalancer to serve the request
  on port 80, creates the postgres database master and read replica in different AZ . This Template
  is created based on Sydney region'
Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String  
  AvailabilityZone1:
    Description: The First Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZone2:
    Description: The Second Availability Zone 
    Type: AWS::EC2::AvailabilityZone::Name
  DMZCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/24
    Description:  CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  DMZCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/24
    Description:  CIDR Block for the Public Subnet (eg 10.0.1.0/24)
    Type: String          
  NginxCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.3.0/24
    Description:  CIDR Block for the private subnet for nginx(eg 10.0.3.0/24)
    Type: String
  NginxCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.4.0/24
    Description:  CIDR Block for the nginx Subnet (eg 10.0.0.0/24)
    Type: String
  pgdbCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.6.0/24
    Description:  CIDR Block for the private subnet for pgdb(eg 10.0.6.0/24)
    Type: String
  pgdbCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.7.0/24
    Description:  CIDR Block for the private subnet for pgdb (eg 10.0.7.0/24)
    Type: String         
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t1.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: vasanth
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: pgdb
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Default: 'root'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Default: 'Welcome123'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.cr1.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    ConstraintDescription: must select a valid database instance type.
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.      
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-56e84c35
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-2589b946
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-f7354198
# Resources Section      
Resources:
# VPC Creation  
  VpcId:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
# Nat Creation            
  NAT1:
    DependsOn: EIP1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  # NAT2:
  #   DependsOn: EIP2
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #       - EIP2
  #       - AllocationId
  #     SubnetId:
  #       Ref: PublicSubnet2
# Elastic IP Address creation  
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  # EIP2:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc      
# Private Route table for NATgateway  
  Route1:
    DependsOn: NAT1    
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
  # Route2:
  #   DependsOn: NAT2    
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId:
  #       Ref: NAT2        
# Private Route table for NATgateway  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
      VpcId:
        Ref: VpcId    
# Associate nginx subnet(Private Subnet) to Private Routetable where NAT gateway attached                
  SubnetAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: nginxSubnet1
  SubnetAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: nginxSubnet2         
## Public Access using Internet Gateway          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VpcId
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
      VpcId:
        Ref: VpcId
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
# Associate Public subnet to Public Routetable where IGW gateway attached        
  PublicSubnetAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnetAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2 
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet group for postgres RDS
      SubnetIds:
        - Ref: 'pgdbSubnet1'                           
        - Ref: 'pgdbSubnet2'                                   
  nginxSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone1'
      CidrBlock: !Ref 'NginxCIDR1'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'VpcId'
  nginxSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone2'
      CidrBlock: !Ref 'NginxCIDR2'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'VpcId'
  pgdbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone1'
      CidrBlock: !Ref 'pgdbCIDR1'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'VpcId'
  pgdbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone2'
      CidrBlock: !Ref 'pgdbCIDR2'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'VpcId'      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone1'
      CidrBlock: !Ref 'DMZCIDR1'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VpcId'
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone2'
      CidrBlock: !Ref 'DMZCIDR2'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VpcId'
# Internal ElB creation            
  ElasticLoadBalancerInternal:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      # AvailabilityZones:
      #   Fn::GetAZs: ''
      # # AvailabilityZones:
      # # - Ref: 'AvailabilityZone1'
      # # - Ref: 'AvailabilityZone2'
      Subnets:
      - Ref: nginxSubnet1
      - Ref: nginxSubnet2        
      CrossZone: 'true'
      Scheme: 'internal'
      SecurityGroups:
      - Ref: ELBInternalSecurityGroup
      Instances: [!Ref 'EC2Instance1', !Ref 'EC2Instance2']
      LBCookieStickinessPolicy:
      - PolicyName: myLBPolicy
        CookieExpirationPeriod: '180'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
        PolicyNames: [myLBPolicy]
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
# External ElB creation        
  ElasticLoadBalancerExternal:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      # AvailabilityZones:
      #   Fn::GetAZs: ''
      # # AvailabilityZones:
      # # - Ref: 'AvailabilityZone1'
      # # - Ref: 'AvailabilityZone2'
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2        
      CrossZone: 'true'
      SecurityGroups:
      - Ref: ELBExternalSecurityGroup
      Instances: [!Ref 'EC2Instance1', !Ref 'EC2Instance2']
      LBCookieStickinessPolicy:
      - PolicyName: myLBPolicy
        CookieExpirationPeriod: '180'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
        PolicyNames: [myLBPolicy]
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5' 
# EC2 Instance creation               
  EC2Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: nginx and cloud formation installation
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nginx: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource EC2Instance1 ', '         --region ', !Ref 'AWS::Region',
                  '

                    ', 'runas=root

                    ']]
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
    Properties:
      # SecurityGroups: [!Ref 'InstanceSecurityGroup']
      SecurityGroupIds: [!Ref 'InstanceSecurityGroup']            
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref 'nginxSubnet1'
      InstanceType: !Ref 'InstanceType'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

            ', 'yum update -y aws-cfn-bootstrap

            ', '/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource EC2Instance1 ', '         --region ', !Ref 'AWS::Region',
          '

            ', '/opt/aws/bin/cfn-signal -e $? ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource EC2Instance1 ', '         --region ', !Ref 'AWS::Region',
          '

            ']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      # SecurityGroups: [!Ref 'InstanceSecurityGroup']
      SecurityGroupIds: [!Ref 'InstanceSecurityGroup']      
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref 'nginxSubnet2'
      InstanceType: !Ref 'InstanceType'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

            ', 'yum update -y aws-cfn-bootstrap

            ', '/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource EC2Instance1 ', '         --region ', !Ref 'AWS::Region',
          '

            ', '/opt/aws/bin/cfn-signal -e $? ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource EC2Instance2 ', '         --region ', !Ref 'AWS::Region',
          '

            ']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
# #Public EC2 instance to test the Private subnet - Commented out for later
#   EC2InstancePublic:
#     Type: AWS::EC2::Instance
#     Properties:
#       # SecurityGroups: [!Ref 'InstanceSecurityGroup']
#       SecurityGroupIds: [!Ref 'InstanceSecurityGroup']      
#       KeyName: !Ref 'KeyName'
#       SubnetId: !Ref 'PublicSubnet2'
#       InstanceType: !Ref 'InstanceType'
#       ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
#           !Ref 'InstanceType', Arch]]
#     CreationPolicy:
#       ResourceSignal:
#         Timeout: PT5M
# PGDB Instance creation
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      # AvailabilityZone: !FindInMap [ constants, rds-primary, az ]
      AvailabilityZone: !Ref 'AvailabilityZone1'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: postgres
      EngineVersion: 9.3.12
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
      - Key: Name
        Value: Master Database
#      VPCSecurityGroups: [!GetAtt [DBEC2SecurityGroup, GroupId]]
      DBSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref 'MasterDB'
      # AvailabilityZone: !FindInMap [ constants, rds-secondary, az ]
      AvailabilityZone: !Ref 'AvailabilityZone2'      
      DBInstanceClass: !Ref 'DBInstanceClass'
      Tags:
      - Key: Name
        Value: Read Replica Database 
# security Group and Ingress creation        
  ELBExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:      
      GroupDescription: External LB SG
      VpcId: !Ref VpcId                 
  ELBInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:      
      GroupDescription: Allow Access from External LB
      VpcId: !Ref VpcId
  ELBIntSGBaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId:
        Ref: ELBExternalSecurityGroup
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:      
      GroupDescription: Enable SSH access from publicsubnet for testing and HTTP access on the inbound port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
  EC2SGBaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId:
        Ref: ELBInternalSecurityGroup
  DBSecurityGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      EC2VpcId: !Ref VpcId
      DBSecurityGroupIngress:
        EC2SecurityGroupId: !Ref InstanceSecurityGroup
      GroupDescription: database access        
Outputs:
  ExternalELBURL:
    Description: External ELB
    Value: !Join ['', ['http://', !GetAtt [ElasticLoadBalancerExternal, DNSName]]]
  InternalELBURL:
    Description: Internal ELB
    Value: !Join ['', ['http://', !GetAtt [ElasticLoadBalancerInternal, DNSName]]]
  EC2Instance1Ip:
    Description:  EC2 Instance1 Private IP Address
    Value:        !GetAtt EC2Instance1.PrivateIp
  EC2Instance2Ip:
    Description:  EC2 Instance2 Private IP Address
    Value:        !GetAtt EC2Instance2.PrivateIp
  MasterDBAddress:
    Description: Master DB Postgres DB addres
    Value: !Join ['', [ !GetAtt [MasterDB, Endpoint.Address], ":", !GetAtt [MasterDB, Endpoint.Port]]]
  ReplicaDBAddress:
    Description: Replica DB Postgres DB addres
    Value: !Join ['', [ !GetAtt [ReplicaDB, Endpoint.Address], ":", !GetAtt [ReplicaDB, Endpoint.Port]]]    